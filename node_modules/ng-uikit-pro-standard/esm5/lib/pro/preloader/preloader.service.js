import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { CONTAINER_QUERY, COMPLETE_CLASS_NAME, TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE, EMULATE_ELEMENT_NAME, } from './preloader.constants';
var MDBSpinningPreloader = /** @class */ (function () {
    function MDBSpinningPreloader(document) {
        this.document = document;
        this.container = this.document.querySelector(CONTAINER_QUERY);
    }
    MDBSpinningPreloader.errorHandler = function () {
        throw new TypeError(TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE);
    };
    MDBSpinningPreloader.prototype.start = function () {
        this.container.classList.remove(COMPLETE_CLASS_NAME);
    };
    MDBSpinningPreloader.prototype.stop = function () {
        this.container.classList.add(COMPLETE_CLASS_NAME);
    };
    Object.defineProperty(MDBSpinningPreloader.prototype, "container", {
        get: function () {
            return this._container;
        },
        set: function (element) {
            this._container = element || this.document.createElement(EMULATE_ELEMENT_NAME);
        },
        enumerable: true,
        configurable: true
    });
    MDBSpinningPreloader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    MDBSpinningPreloader = __decorate([
        Injectable(),
        __param(0, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Object])
    ], MDBSpinningPreloader);
    return MDBSpinningPreloader;
}());
export { MDBSpinningPreloader };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy11aWtpdC1wcm8tc3RhbmRhcmQvIiwic291cmNlcyI6WyJsaWIvcHJvL3ByZWxvYWRlci9wcmVsb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFDTCxlQUFlLEVBQ2YsbUJBQW1CLEVBQ25CLDBDQUEwQyxFQUMxQyxvQkFBb0IsR0FDckIsTUFBTSx1QkFBdUIsQ0FBQztBQUsvQjtJQU9FLDhCQUFxQyxRQUFhO1FBQWIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUNoRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFOYSxpQ0FBWSxHQUExQjtRQUNFLE1BQU0sSUFBSSxTQUFTLENBQUMsMENBQTBDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBTU0sb0NBQUssR0FBWjtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxtQ0FBSSxHQUFYO1FBQ0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELHNCQUFXLDJDQUFTO2FBQXBCO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLENBQUM7YUFFRCxVQUFxQixPQUFPO1lBQzFCLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDakYsQ0FBQzs7O09BSkE7O2dEQWRZLE1BQU0sU0FBQyxRQUFROztJQVBqQixvQkFBb0I7UUFEaEMsVUFBVSxFQUFFO1FBUUUsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7O09BUGxCLG9CQUFvQixDQTBCaEM7SUFBRCwyQkFBQztDQUFBLEFBMUJELElBMEJDO1NBMUJZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7XG4gIENPTlRBSU5FUl9RVUVSWSxcbiAgQ09NUExFVEVfQ0xBU1NfTkFNRSxcbiAgVFlQRV9FUlJPUl9DT05UQUlORVJfV0FTX05PVF9GT1VORF9NRVNTQUdFLFxuICBFTVVMQVRFX0VMRU1FTlRfTkFNRSxcbn0gZnJvbSAnLi9wcmVsb2FkZXIuY29uc3RhbnRzJztcblxuaW1wb3J0IHsgTURCX1NQSU5OSU5HX1BSRUxPQURFUl9UWVBFIH0gZnJvbSAnLi9wcmVsb2FkZXIudHlwZXMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTURCU3Bpbm5pbmdQcmVsb2FkZXIge1xuICBwdWJsaWMgX2NvbnRhaW5lcjogTURCX1NQSU5OSU5HX1BSRUxPQURFUl9UWVBFO1xuXG4gIHB1YmxpYyBzdGF0aWMgZXJyb3JIYW5kbGVyKCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoVFlQRV9FUlJPUl9DT05UQUlORVJfV0FTX05PVF9GT1VORF9NRVNTQUdFKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHB1YmxpYyBkb2N1bWVudDogYW55KSB7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoQ09OVEFJTkVSX1FVRVJZKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKENPTVBMRVRFX0NMQVNTX05BTUUpO1xuICB9XG5cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChDT01QTEVURV9DTEFTU19OQU1FKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY29udGFpbmVyKCk6IE1EQl9TUElOTklOR19QUkVMT0FERVJfVFlQRSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgY29udGFpbmVyKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jb250YWluZXIgPSBlbGVtZW50IHx8IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChFTVVMQVRFX0VMRU1FTlRfTkFNRSk7XG4gIH1cbn1cbiJdfQ==