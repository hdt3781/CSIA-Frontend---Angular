/**
 * Created by sebastianfuss on 02.09.16.
 */
export class PageScrollUtilService {
    /**
     * Util method to check whether a given variable is either undefined or null
     * @param variable
  true the variable is undefined or null
     */
    static isUndefinedOrNull(variable) {
        return typeof variable === 'undefined' || variable === undefined || variable === null;
    }
    static extractElementPosition(document, scrollTargetElement) {
        const body = document.body;
        const docEl = document.documentElement;
        const windowPageYOffset = (document.defaultView && document.defaultView.pageYOffset) || undefined;
        const windowPageXOffset = (document.defaultView && document.defaultView.pageXOffset) || undefined;
        const scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;
        const scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;
        const clientTop = docEl.clientTop || body.clientTop || 0;
        const clientLeft = docEl.clientLeft || body.clientLeft || 0;
        if (PageScrollUtilService.isUndefinedOrNull(scrollTargetElement)) {
            // No element found, so return the current position to not cause any change in scroll position
            return { top: scrollTop, left: scrollLeft };
        }
        const box = scrollTargetElement.getBoundingClientRect();
        const top = box.top + scrollTop - clientTop;
        const left = box.left + scrollLeft - clientLeft;
        return { top: Math.round(top), left: Math.round(left) };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLXBhZ2Utc2Nyb2xsLXV0aWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXVpa2l0LXByby1zdGFuZGFyZC9zcmMvbGliL3Byby9zbW9vdGhzY3JvbGwvbWRiLXBhZ2Utc2Nyb2xsLXV0aWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUVILE1BQU0sT0FBTyxxQkFBcUI7SUFDaEM7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxRQUFhO1FBQzNDLE9BQU8sT0FBTyxRQUFRLEtBQUssV0FBVyxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxLQUFLLElBQUksQ0FBQztJQUN4RixDQUFDO0lBRU0sTUFBTSxDQUFDLHNCQUFzQixDQUNsQyxRQUFrQixFQUNsQixtQkFBZ0M7UUFFaEMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMzQixNQUFNLEtBQUssR0FBUSxRQUFRLENBQUMsZUFBZSxDQUFDO1FBRTVDLE1BQU0saUJBQWlCLEdBQ3JCLENBQUMsUUFBUSxDQUFDLFdBQVcsSUFBSyxRQUFRLENBQUMsV0FBVyxDQUFDLFdBQW1CLENBQUMsSUFBSSxTQUFTLENBQUM7UUFDbkYsTUFBTSxpQkFBaUIsR0FDckIsQ0FBQyxRQUFRLENBQUMsV0FBVyxJQUFLLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBbUIsQ0FBQyxJQUFJLFNBQVMsQ0FBQztRQUVuRixNQUFNLFNBQVMsR0FBRyxpQkFBaUIsSUFBSSxLQUFLLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDekUsTUFBTSxVQUFVLEdBQUcsaUJBQWlCLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRTVFLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7UUFDekQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQztRQUU1RCxJQUFJLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDaEUsOEZBQThGO1lBQzlGLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQztTQUM3QztRQUNELE1BQU0sR0FBRyxHQUFHLG1CQUFtQixDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFFeEQsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzVDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUVoRCxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgc2ViYXN0aWFuZnVzcyBvbiAwMi4wOS4xNi5cbiAqL1xuXG5leHBvcnQgY2xhc3MgUGFnZVNjcm9sbFV0aWxTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIFV0aWwgbWV0aG9kIHRvIGNoZWNrIHdoZXRoZXIgYSBnaXZlbiB2YXJpYWJsZSBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIG51bGxcbiAgICogQHBhcmFtIHZhcmlhYmxlXG50cnVlIHRoZSB2YXJpYWJsZSBpcyB1bmRlZmluZWQgb3IgbnVsbFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc1VuZGVmaW5lZE9yTnVsbCh2YXJpYWJsZTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFyaWFibGUgPT09IHVuZGVmaW5lZCB8fCB2YXJpYWJsZSA9PT0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZXh0cmFjdEVsZW1lbnRQb3NpdGlvbihcbiAgICBkb2N1bWVudDogRG9jdW1lbnQsXG4gICAgc2Nyb2xsVGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnRcbiAgKTogeyB0b3A6IG51bWJlcjsgbGVmdDogbnVtYmVyIH0ge1xuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IGRvY0VsOiBhbnkgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICBjb25zdCB3aW5kb3dQYWdlWU9mZnNldDogbnVtYmVyIHwgYW55ID1cbiAgICAgIChkb2N1bWVudC5kZWZhdWx0VmlldyAmJiAoZG9jdW1lbnQuZGVmYXVsdFZpZXcucGFnZVlPZmZzZXQgYXMgYW55KSkgfHwgdW5kZWZpbmVkO1xuICAgIGNvbnN0IHdpbmRvd1BhZ2VYT2Zmc2V0OiBudW1iZXIgfCBhbnkgPVxuICAgICAgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIChkb2N1bWVudC5kZWZhdWx0Vmlldy5wYWdlWE9mZnNldCBhcyBhbnkpKSB8fCB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBzY3JvbGxUb3AgPSB3aW5kb3dQYWdlWU9mZnNldCB8fCBkb2NFbC5zY3JvbGxUb3AgfHwgYm9keS5zY3JvbGxUb3A7XG4gICAgY29uc3Qgc2Nyb2xsTGVmdCA9IHdpbmRvd1BhZ2VYT2Zmc2V0IHx8IGRvY0VsLnNjcm9sbExlZnQgfHwgYm9keS5zY3JvbGxMZWZ0O1xuXG4gICAgY29uc3QgY2xpZW50VG9wID0gZG9jRWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gICAgY29uc3QgY2xpZW50TGVmdCA9IGRvY0VsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG5cbiAgICBpZiAoUGFnZVNjcm9sbFV0aWxTZXJ2aWNlLmlzVW5kZWZpbmVkT3JOdWxsKHNjcm9sbFRhcmdldEVsZW1lbnQpKSB7XG4gICAgICAvLyBObyBlbGVtZW50IGZvdW5kLCBzbyByZXR1cm4gdGhlIGN1cnJlbnQgcG9zaXRpb24gdG8gbm90IGNhdXNlIGFueSBjaGFuZ2UgaW4gc2Nyb2xsIHBvc2l0aW9uXG4gICAgICByZXR1cm4geyB0b3A6IHNjcm9sbFRvcCwgbGVmdDogc2Nyb2xsTGVmdCB9O1xuICAgIH1cbiAgICBjb25zdCBib3ggPSBzY3JvbGxUYXJnZXRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgY29uc3QgdG9wID0gYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcDtcbiAgICBjb25zdCBsZWZ0ID0gYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdDtcblxuICAgIHJldHVybiB7IHRvcDogTWF0aC5yb3VuZCh0b3ApLCBsZWZ0OiBNYXRoLnJvdW5kKGxlZnQpIH07XG4gIH1cbn1cbiJdfQ==