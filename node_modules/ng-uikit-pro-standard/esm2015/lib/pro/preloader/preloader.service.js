import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { CONTAINER_QUERY, COMPLETE_CLASS_NAME, TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE, EMULATE_ELEMENT_NAME, } from './preloader.constants';
export class MDBSpinningPreloader {
    constructor(document) {
        this.document = document;
        this.container = this.document.querySelector(CONTAINER_QUERY);
    }
    static errorHandler() {
        throw new TypeError(TYPE_ERROR_CONTAINER_WAS_NOT_FOUND_MESSAGE);
    }
    start() {
        this.container.classList.remove(COMPLETE_CLASS_NAME);
    }
    stop() {
        this.container.classList.add(COMPLETE_CLASS_NAME);
    }
    get container() {
        return this._container;
    }
    set container(element) {
        this._container = element || this.document.createElement(EMULATE_ELEMENT_NAME);
    }
}
MDBSpinningPreloader.decorators = [
    { type: Injectable }
];
MDBSpinningPreloader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy11aWtpdC1wcm8tc3RhbmRhcmQvc3JjL2xpYi9wcm8vcHJlbG9hZGVyL3ByZWxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxPQUFPLEVBQ0wsZUFBZSxFQUNmLG1CQUFtQixFQUNuQiwwQ0FBMEMsRUFDMUMsb0JBQW9CLEdBQ3JCLE1BQU0sdUJBQXVCLENBQUM7QUFLL0IsTUFBTSxPQUFPLG9CQUFvQjtJQU8vQixZQUFxQyxRQUFhO1FBQWIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUNoRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFOTSxNQUFNLENBQUMsWUFBWTtRQUN4QixNQUFNLElBQUksU0FBUyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQU1NLEtBQUs7UUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxJQUFXLFNBQVM7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFXLFNBQVMsQ0FBQyxPQUFPO1FBQzFCLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDakYsQ0FBQzs7O1lBMUJGLFVBQVU7Ozs0Q0FRSSxNQUFNLFNBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7XG4gIENPTlRBSU5FUl9RVUVSWSxcbiAgQ09NUExFVEVfQ0xBU1NfTkFNRSxcbiAgVFlQRV9FUlJPUl9DT05UQUlORVJfV0FTX05PVF9GT1VORF9NRVNTQUdFLFxuICBFTVVMQVRFX0VMRU1FTlRfTkFNRSxcbn0gZnJvbSAnLi9wcmVsb2FkZXIuY29uc3RhbnRzJztcblxuaW1wb3J0IHsgTURCX1NQSU5OSU5HX1BSRUxPQURFUl9UWVBFIH0gZnJvbSAnLi9wcmVsb2FkZXIudHlwZXMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTURCU3Bpbm5pbmdQcmVsb2FkZXIge1xuICBwdWJsaWMgX2NvbnRhaW5lcjogTURCX1NQSU5OSU5HX1BSRUxPQURFUl9UWVBFO1xuXG4gIHB1YmxpYyBzdGF0aWMgZXJyb3JIYW5kbGVyKCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoVFlQRV9FUlJPUl9DT05UQUlORVJfV0FTX05PVF9GT1VORF9NRVNTQUdFKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHB1YmxpYyBkb2N1bWVudDogYW55KSB7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoQ09OVEFJTkVSX1FVRVJZKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKENPTVBMRVRFX0NMQVNTX05BTUUpO1xuICB9XG5cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChDT01QTEVURV9DTEFTU19OQU1FKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY29udGFpbmVyKCk6IE1EQl9TUElOTklOR19QUkVMT0FERVJfVFlQRSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgY29udGFpbmVyKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jb250YWluZXIgPSBlbGVtZW50IHx8IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChFTVVMQVRFX0VMRU1FTlRfTkFNRSk7XG4gIH1cbn1cbiJdfQ==