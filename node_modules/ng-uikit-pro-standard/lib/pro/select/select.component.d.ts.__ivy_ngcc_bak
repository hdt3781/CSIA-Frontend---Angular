import { ViewContainerRef, ElementRef, TemplateRef, EventEmitter, QueryList, AfterContentInit, OnDestroy, OnInit, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { OptionComponent } from '../option/option.component';
import { NgControl, ControlValueAccessor } from '@angular/forms';
import { OptionGroupComponent } from '../option/option-group.component';
import { SelectAllOptionComponent } from '../option/select-all-option';
import { Overlay, ViewportRuler } from '@angular/cdk/overlay';
import { MdbSelectFilterComponent } from './select-filter.component';
export declare class MdbSelectComponent implements OnInit, OnDestroy, AfterContentInit, ControlValueAccessor {
    private _overlay;
    private _viewportRuler;
    private _vcr;
    private _cdRef;
    private _renderer;
    ngControl: NgControl;
    private _selectWrapper;
    private _selectValue;
    _dropdownTemplate: TemplateRef<any>;
    dropdown: ElementRef;
    filter: MdbSelectFilterComponent;
    private _optionsWrapper;
    _customContent: ElementRef;
    selectAllOption: SelectAllOptionComponent;
    options: QueryList<OptionComponent>;
    optionGroups: QueryList<OptionGroupComponent>;
    allowClear: boolean;
    clearButtonTabindex: number;
    disabled: boolean;
    dropdownClass: string;
    highlightFirst: boolean;
    label: string;
    multiple: boolean;
    notFoundMsg: string;
    outline: boolean;
    placeholder: string;
    tabindex: number;
    required: boolean;
    ariaLabel: string;
    ariaLabelledby: string;
    get visibleOptions(): number;
    set visibleOptions(value: number);
    private _visibleOptions;
    get optionHeight(): any;
    set optionHeight(value: any);
    private _optionHeight;
    get dropdownHeight(): number;
    set dropdownHeight(value: number);
    protected _dropdownHeight: number;
    get value(): any;
    set value(newValue: any);
    private _value;
    get compareWith(): (o1: any, o2: any) => boolean;
    set compareWith(fn: (o1: any, o2: any) => boolean);
    sortComparator: (a: OptionComponent, b: OptionComponent, options: OptionComponent[]) => number;
    readonly valueChange: EventEmitter<any>;
    opened: EventEmitter<any>;
    closed: EventEmitter<any>;
    selected: EventEmitter<OptionComponent>;
    deselected: EventEmitter<OptionComponent | OptionComponent[]>;
    noOptionsFound: EventEmitter<string>;
    get activeOption(): OptionComponent | null;
    get selectionView(): string;
    get hasSelection(): boolean;
    get allChecked(): boolean;
    private _keyManager;
    private _overlayRef;
    private _portal;
    private _selectionModel;
    previousSelectedValues: any;
    private _destroy;
    _isOpen: boolean;
    _hasFocus: boolean;
    _labelActive: boolean;
    _showNoResultsMsg: boolean;
    private _selectAllChecked;
    private _compareWith;
    handleKeydown(event: any): void;
    get select(): boolean;
    get isOutline(): boolean;
    get isMultiselectable(): boolean;
    get hasPopup(): boolean;
    get isDisabled(): boolean;
    get isExpanded(): boolean;
    get role(): "combobox" | "listbox";
    constructor(_overlay: Overlay, _viewportRuler: ViewportRuler, _vcr: ViewContainerRef, _cdRef: ChangeDetectorRef, _renderer: Renderer2, ngControl: NgControl);
    ngAfterContentInit(): void;
    restoreMultipleOptions(): void;
    private _initKeyManager;
    private _listenToOptionClick;
    private _listenToSelectAllClick;
    private _updateValue;
    private _handleOptionClick;
    private _handleSingleSelection;
    private _handleMultipleSelection;
    private _setSelection;
    private _selectByValue;
    private _setInitialValue;
    onSelectAll(selectAlloption: SelectAllOptionComponent): void;
    open(): void;
    private _sortValues;
    private _listenToOutSideCick;
    private _getOverlayPosition;
    private _getPositions;
    close(): void;
    toggle(): void;
    private _updateLabeLPosition;
    get hasSelected(): boolean;
    private _scrollToOption;
    private _getNumberOfGroupsBeforeOption;
    handleSelectionClear(event: MouseEvent): void;
    private _handleOpenKeydown;
    private _handleClosedKeydown;
    handleOptionsWheel(event: any): void;
    private _focus;
    private _highlightFirstOption;
    onFocus(): void;
    onBlur(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /** ControlValueAccessor interface methods. **/
    private _onChange;
    private _onTouched;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
}
